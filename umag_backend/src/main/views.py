from rest_framework import generics, status
from .serializers import SupportConsultationSerializer, KeySerializer
from rest_framework.response import Response
from .models import *
from .send_bot import send_telegram_message
from rest_framework.permissions import AllowAny
import json
import requests
from django.http import JsonResponse



def message_result(id:int, status:str, type:str, key:str) -> str:

    STATUS ={
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–≥–∞": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –±–∞–≥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ üîç",
        "Backlog": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–µ–∫–ª–æ–≥ –≤ IT-–±–ª–æ–∫–µ üóÇÔ∏èüìå",
        "Selected for Development": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –±—ã–ª –≤–∑—è—Ç –≤ —Å–ø—Ä–∏–Ω—Ç —É IT-–±–ª–æ–∫–∞ üìÖüöÄ",
        "In Progress": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —É IT-–±–ª–æ–∫–∞ üë©‚Äçüíªüë®‚Äçüíª",
        "Review": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –¢–µ—Ö–õ–∏–¥–∞/–°—Ç–∞—Ä—à–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üë®‚Äçüíªüîç",
        "Test": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üìù‚úÖ",
        "Ready to deploy": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω üë®‚Äçüíª",
        "Done": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –±—ã–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω ‚úîÔ∏è",
        "–û–∂–∏–¥–∞–µ—Ç IT-—Ä–µ—à–µ–Ω–∏—è": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* —Ç—Ä–µ–±—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ü—Ä–æ–¥—É–∫—Ç–∞, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üë®‚Äçüíªüìù",
        "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ü—Ä–æ–¥—É–∫—Ç–∞, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üìù",
        "–û—Ç–∫–∞–∑–∞–Ω–æ": f"–í–∞—à {type} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π *{key}* –Ω–µ –±—É–¥–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∏–Ω—á–∏–Ω–∞–º–∏ ‚ùå",
    }

    return STATUS.get(status, f"–í–∞—à {type} —Å ID {id} —Å –∫–ª—é—á–µ–º {key} –æ–±–Ω–æ–≤–ª–µ–Ω üìù. –°—Ç–∞—Ç—É—Å (*{status}* ))""")



class SupportConsultationPost(generics.GenericAPIView):
    serializer_class = SupportConsultationSerializer
    queryset = SupportConsultation.objects.all()
    def post(self, request, *args, **kwargs):
        serializer = SupportConsultationSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)





class IssueCreatedWebhook(generics.GenericAPIView):
    queryset = WebhookIssueCreated.objects.all()
    permission_classes = (AllowAny, )


    def post(self, request, *args, **kwargs):
        data = json.dumps(request.data, indent=2, ensure_ascii=False)
        instance = WebhookIssueCreated.objects.create(description=data)
        obj = json.loads(data)
        instance.issue_id = obj['issue']['id']
        instance.project_name =obj['issue']['fields']['project']['name']
        instance.status =obj['issue']['fields']['status']['name']
        instance.save()
        id = obj['issue']['fields'][f'{Settings.objects.first().telegram_filed}']
        #message = f"""–í–∞—à {obj['issue']['fields']['issuetype']['name']} —Å ID {obj['issue']['id']} —Å –∫–ª—é—á–µ–º {obj['issue']['key']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ. –°—Ç–∞—Ç—É—Å (**{obj['issue']['fields'][('status')]['name']}** )"""
        message = f"""–í–∞—à {obj['issue']['fields']['issuetype']['name']} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π {obj['issue']['key']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ."""
        try:
            send_telegram_message(id, message)
            return Response(status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error': e}, status=status.HTTP_400_BAD_REQUEST)





# class IssueUpdatedWebhook(generics.GenericAPIView):
#     queryset = WebhookIssueUpdated.objects.all()
#     permission_classes = (AllowAny, )
#
#
#     def post(self, request, *args, **kwargs):
#         data = json.dumps(request.data, indent=2, ensure_ascii=False)
#         instance = WebhookIssueUpdated.objects.create(description=data)
#         #data = WebhookIssueUpdated.objects.get(id=1).description
#         obj = json.loads(data)
#         instance.issue_id = obj['issue']['id']
#         instance.project_name =obj['issue']['fields']['project']['name']
#         instance.status =obj['issue']['fields']['status']['name']
#         instance.save()
#
#         id = obj['issue']['fields'][f'{Settings.objects.first().telegram_filed}']
#         message = f"""–í–∞—à {obj['issue']['fields']['issuetype']['name']} —Å ID {obj['issue']['id']} —Å –∫–ª—é—á–µ–º {obj['issue']['key']} –æ–±–Ω–æ–≤–ª–µ–Ω üìù. –°—Ç–∞—Ç—É—Å (*{obj['issue']['fields'][('status')]['name']}* ))"""
#         try:
#             send_telegram_message(id, message)
#             return Response(status=status.HTTP_200_OK)
#         except Exception as e:
#             return Response({'error': e}, status=status.HTTP_400_BAD_REQUEST)


from datetime import timedelta
import datetime
import pytz

class IssueUpdatedWebhook(generics.GenericAPIView):
    queryset = WebhookIssueUpdated.objects.all()
    permission_classes = (AllowAny,)

    def post(self, request, *args, **kwargs):
        data = json.dumps(request.data, indent=2, ensure_ascii=False)
        obj = json.loads(data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
        issue_id = obj['issue']['id']
        project_name = obj['issue']['fields']['project']['name']
        status_name = obj['issue']['fields']['status']['name']

        timestamp_text = str(obj['timestamp'])  # –ü–æ–ª—É—á–∞–µ–º timestamp –∫–∞–∫ —Ç–µ–∫—Å—Ç

        tz = pytz.timezone('Asia/Almaty')
        timestamp_datetime = datetime.datetime.utcfromtimestamp(int(timestamp_text) / 1000.0)
        timestamp_datetime = timestamp_datetime.replace(tzinfo=pytz.utc).astimezone(tz)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º timestamp_datetime –æ–±—Ä–∞—Ç–Ω–æ –≤ UTC, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Å created_at
        timestamp_utc = timestamp_datetime.astimezone(pytz.utc)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ UTC
        start_time = timestamp_utc - datetime.timedelta(seconds=3)
        end_time = timestamp_utc + datetime.timedelta(seconds=3)
        webhookupdate = WebhookIssueUpdated.objects.filter(issue_id=issue_id, status=status_name,
                                                  created_at__range=(start_time, end_time))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ issue_id –∏ timestamp/status
        if not webhookupdate.exists():
            instance = WebhookIssueUpdated.objects.create(description=data)
            instance.issue_id = issue_id
            instance.project_name = project_name
            instance.status = status_name
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ timestamp, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –º–æ–¥–µ–ª–∏
            instance.timestamp = timestamp_text
            instance.save()

            id = obj['issue']['fields'][f'{Settings.objects.first().telegram_filed}']
            message = message_result(issue_id, status_name, obj['issue']['fields']['issuetype']['name'], obj['issue']['key'])
            # = f"""–í–∞—à {obj['issue']['fields']['issuetype']['name']} —Å ID {issue_id} —Å –∫–ª—é—á–µ–º {obj['issue']['key']} –æ–±–Ω–æ–≤–ª–µ–Ω üìù. –°—Ç–∞—Ç—É—Å (*{status_name}* ))"""
            try:
                send_telegram_message(id, message)
                return Response(status=status.HTTP_200_OK)
            except Exception as e:
                return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
        else:
            webhookupdate.first().delete()
            # –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            return JsonResponse({'message': 'Event already processed'}, status=status.HTTP_200_OK)



class IssueDeletedWebhook(generics.GenericAPIView):
    queryset = WebhookIssueDeleted.objects.all()
    permission_classes = (AllowAny, )


    def post(self, request, *args, **kwargs):
        data = json.dumps(request.data, indent=2, ensure_ascii=False)
        instance = WebhookIssueDeleted.objects.create(description=data)
        obj = json.loads(data)
        instance.issue_id = obj['issue']['id']
        instance.project_name =obj['issue']['fields']['project']['name']
        instance.status =obj['issue']['fields']['status']['name']
        instance.save()
        id = obj['issue']['fields'][f'{Settings.objects.first().telegram_filed}']
        #message = f"""–í–∞—à {obj['issue']['fields']['issuetype']['name']} —Å ID {obj['issue']['id']} —Å –∫–ª—é—á–µ–º {obj['issue']['key']} —É–¥–∞–ª–µ–Ω–æ ‚ùå —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (**{obj['issue']['fields'][('status')]['name']}** )"""
        message = f"""–í–∞—à {obj['issue']['fields']['issuetype']['name']} —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π {obj['issue']['key']} —É–¥–∞–ª–µ–Ω ‚ùå."""
        try:
            send_telegram_message(id, message)
            return Response(status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error': e}, status=status.HTTP_400_BAD_REQUEST)



class AmoCrmWebhook(generics.GenericAPIView):
    queryset = AmoCrmWebhookModel.objects.all()
    permission_classes = (AllowAny, )


    def post(self, request, *args, **kwargs):
        pass
        #telegram = requests.post('https://pay.ziz.kz/api/webhook/amo_crm', json = request.data)
        #telegram = requests.post('https://umag.ziz.kz/api/webhook/amo_crm', json = request.data)
        #telegram = requests.post('https://pay.ziz.kz/api/bot', json = request.data)
        #requests.post('https://amojo.amocrm.ru/~external/hooks/telegram?t=6397638357:AAEF4kljx7MgkA56vx5jTbB-lAjWkLVLVk4', json = request.data)
        #data = json.dumps(request.data, indent=2, ensure_ascii=False)
        #AmoCrmWebhookModel.objects.create(description=request.data)
        #return Response(status=status.HTTP_200_OK)


class AccessTokenApi(generics.GenericAPIView):
    permission_classes = (AllowAny, )
    serializer_class = KeySerializer


    def post(self, request, *args, **kwargs):
        serializer = KeySerializer(data=request.data)
        if serializer.is_valid(raise_exception = True):
            if serializer.data['key'] == Settings.objects.first().amo_secret_key:
                return Response({'access_token': RefreshAccessToken.objects.first().access_token}, status=status.HTTP_200_OK)
            return Response({"detail": "–í–∞—à –∫–ª—é—á—å –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–µ–Ω"}, status=status.HTTP_401_UNAUTHORIZED)
        return Response(status=status.HTTP_400_BAD_REQUEST)